package servidor;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.NotFoundException;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.Socket;
import java.net.SocketException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.catalina.Context;
import org.apache.catalina.LifecycleException;
import org.apache.catalina.startup.Tomcat;

/**
 *
 * @author Jairo
 */
public class Inicio extends javax.swing.JFrame {

    String enlace, msg, appBase = ".";
    int port = 80, x, y, x1;
    Image img;

    public Inicio() {
        try {
            this.setUndecorated(true);
            initComponents();
            this.setTitle("SERVIDOR");
            if (System.getProperty("os.name").startsWith("W")) {
                enlace = obtenerIP();
            } else {
                port = 8888;
                enlace = buscarIP();
            }
            boolean usando = isPortInUse();
            int portInicial = port;
            while (usando) {
                port = port - 1;
                if (port < 2020) {
                    port = 3030;
                } else if (port == portInicial) {
                    System.out.println("No existen puertos disponibles");
                    System.exit(0);
                }
                usando = isPortInUse();
            }
            x = this.getWidth();
            y = this.getHeight();
            String charset = "UTF-8";
            Map<EncodeHintType, ErrorCorrectionLevel> hashMap = new HashMap<>();
            hashMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
            BitMatrix matrix = new MultiFormatWriter().encode(new String(("http://" + enlace + ":" + port).getBytes(charset), charset), BarcodeFormat.QR_CODE, y - 100, y - 100);
            BufferedImage bi = MatrixToImageWriter.toBufferedImage(matrix);
            for (int i = 0; i < y - 100; i++) {
                for (int j = 0; j < y - 100; j++) {
                    if (bi.getRGB(i, j) == -1) {
                        bi.setRGB(i, j, -16777216);
                    } else {
                        bi.setRGB(i, j, -1);
                    }
                }
            }
            img = bi;
            iniciarServidor();
        } catch (UnsupportedEncodingException | WriterException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(600, 300));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void formMouseClicked(java.awt.event.MouseEvent evt) {                                  
        int wx = evt.getX();
        int hy = evt.getY();
        if (wx >= (x - x1) / 2 && wx < (x + x1) / 2 && y - hy <= 30) {
            StringSelection stringSelection = new StringSelection(msg);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
            msg = "COPIADO";
            repaint();
            correrHilo();
        }
    }                                 

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException, NotFoundException {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
    @Override
    public void paint(Graphics g) {
        Graphics2D d = (Graphics2D) g;
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, x, y);
        g.setColor(Color.WHITE);
        d.drawString("Â© Jairo Cabrera Pino", x - 130, y - 15);
        g.setFont(new Font("Tahoma", Font.PLAIN, 20));
        x1 = g.getFontMetrics().stringWidth(msg);
        g.drawString(msg, (x - x1) / 2, y - 15);
        g.drawImage(img, (x - y) / 2 + 50, 50, this);
    }

    private void iniciarServidor() {
        System.out.println("Iniciando servidor");
        new Thread() {
            @Override
            public void run() {
                try {
                    Tomcat tomcat = new Tomcat();
                    tomcat.setPort(port);
                    tomcat.setHostname("localhost");
                    tomcat.getHost().setAppBase(appBase);
                    File file = new File(appBase);
                    File docBase = new File(file.getCanonicalPath() + "/Archivos");
                    if (!docBase.exists()) {
                        docBase.mkdirs();
                    }
                    Context context = tomcat.addWebapp("/", docBase.getAbsolutePath());
                    ServidorDescargarCargar servlet = new ServidorDescargarCargar();
                    Tomcat.addServlet(context, servlet.getClass().getSimpleName(), servlet.getClass().getName());
                    context.addServletMappingDecoded("", servlet.getClass().getSimpleName());
                    tomcat.start();
                    repaint();
                    tomcat.getServer().await();
                } catch (LifecycleException | IOException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private boolean isPortInUse() {
        try {
            new Socket(enlace, port).close();
            return true;
        } catch (IOException ex) {
            msg = enlace;
            if (port != 80) {
                msg += ":" + String.valueOf(port);
            }
            return false;
        }
    }

    private void correrHilo() {
        new Thread() {
            @Override
            public void run() {
                try {
                    Thread.sleep(1500);
                    msg = enlace;
                    if (port != 80) {
                        msg += ":" + String.valueOf(port);
                    }
                    repaint();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private String obtenerIP() {
        String defaultAddress = "";
        try {
            Process result = Runtime.getRuntime().exec("netstat -rn");
            BufferedReader output = new BufferedReader(new InputStreamReader(result.getInputStream()));
            String line = output.readLine();
            while (line != null) {
                if (line.contains("0.0.0.0")) {
                    StringTokenizer stringTokenizer = new StringTokenizer(line);
                    stringTokenizer.nextElement(); // first element is 0.0.0.0
                    stringTokenizer.nextElement(); // second element is 0.0.0.0
                    stringTokenizer.nextElement();// third is gateway ip
                    defaultAddress = (String) stringTokenizer.nextElement();
                    break;
                }
                line = output.readLine();
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return defaultAddress;

    }

    private String buscarIP() {
        try {
            Enumeration e = NetworkInterface.getNetworkInterfaces();
            while (e.hasMoreElements()) {
                NetworkInterface n = (NetworkInterface) e.nextElement();
                Enumeration ee = n.getInetAddresses();
                while (ee.hasMoreElements()) {
                    InetAddress i = (InetAddress) ee.nextElement();
                    if (!i.isLoopbackAddress()) {
                        String ip = i.getHostAddress();
                        int p = ip.lastIndexOf(".") + 1;
                        if (p > 0 && !ip.substring(p).equals("1")) {
                            return ip;
                        }
                    }
                }
            }
        } catch (SocketException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "NO ENCONTRADO";
    }
}
